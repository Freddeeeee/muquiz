@model HostGameVM
@using MuQuiz.Hubs

<div id="content">
    <button id="sendsong">Send song</button>

</div>

<div id="players">

</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/@@aspnet/signalr@1.1.0/dist/browser/signalr.min.js"></script>
    <script type="text/javascript">
        (async function () {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/gamehub")
                .build();

            //to-do: connect to actual game of list which "pops" ?
            let rounds = 3;

            async function getPartialView(url, successFunc) {
                await $.ajax({
                    url: url,
                    type: "GET",
                    success: async function (result) {
                        successFunc(result)
                    },
                    error: function (result) {
                        console.log(result);
                    }
                })
            }

            async function getHostAlternatives(songId) {
                await getPartialView("/host/showalternatives?song=" + songId, async function (result) {
                    $("#content").html(result);
                    await setTimeout(async function () {
                        await getWaitingOrFinalView();
                    }, 5000);
                })
            }

            //SCH: change name of this func?
            async function getWaitingOrFinalView() {
                if (rounds > 0) {
                    await connection.invoke("@nameof(GameHub.SendToWaitingScreen)", "@Model.GameId");
                    await getHostResults();
                }
                else {
                     await connection.invoke("@nameof(GameHub.SendToFinalPosition)", "@Model.GameId");
                     await getHostFinalResults();
                }
            }

            async function getHostResults() {
                await getPartialView("/host/showresults", result => {
                    $("#content").html(result);
                    $("#players").empty();
                });
            }

            async function getHostFinalResults() {
                await getPartialView("/host/showfinalresults", async function (result) {
                    $("#content").html(result);
                });
            }

            async function selectAndGetHostAlternatives(song) {
                // to-do: request answers and create url from song
                let songId = "test";
                await getHostAlternatives(songId);
            };

            async function sendSong() {
                rounds--; //to-do: "pop" from list of songs here?
                await connection.invoke("@nameof(GameHub.SendSong)", "@Model.GameId", "song");
                await selectAndGetHostAlternatives("song");
            }

            window.sendSong = sendSong;

            connection.on("@nameof(IHubClient.ReceiveAnswer)", function () {
                $("#players").append("Received answer");
            });

            await connection.start().catch(err => console.log(err));

            $("#sendsong").click(async function () {
                await sendSong();
            });
        })();
    </script>
}