@model HostGameVM
@using MuQuiz.Hubs

<div id="content">
    <button id="sendsong">Send song</button>

</div>

<div id="players">

</div>

@section scripts {
    <script src="https://sdk.scdn.co/spotify-player.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@aspnet/signalr@1.1.0/dist/browser/signalr.min.js"></script>
    <script type="text/javascript">
        // Spotify (must follow import of spotify-player.js)
        window.onSpotifyWebPlaybackSDKReady = () => {
            const token = "@Model.SpotifyToken";

            const player = new Spotify.Player({
                name: 'MuQuiz Player',
                volume: 0.5,
                getOAuthToken: cb => { cb(token); }
            });

            // Error handling
            player.addListener('initialization_error', ({ message }) => { console.error(message); });
            player.addListener('authentication_error', ({ message }) => { console.error(message); });
            player.addListener('account_error', ({ message }) => { console.error(message); });
            player.addListener('playback_error', ({ message }) => { console.error(message); });

            // Ready
            player.addListener('ready', ({ device_id }) => {
                console.log('Ready with Device ID', device_id);
                window.spotifyPlayer = player;
            });

            // Not Ready
            player.addListener('not_ready', ({ device_id }) => {
                console.log('Device ID has gone offline', device_id);
            });

            // Connect to the player!
            player.connect();
        };

        (async function () {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/gamehub")
                .build();

            let songIds = @Model.SongIds;

            async function getPartialView(url, successFunc) {
                await $.ajax({
                url: url,
                type: "GET",
                success: async function (result) {
                        successFunc(result)
                },
                error: function (result) {
                        console.log(result);
                    }
                })
            }

            async function getHostAlternatives(songId) {
                await getPartialView("/host/showalternatives?song=" + songId, async function (result) {
                    $("#content").html(result);
                    await setTimeout(async function () {
                        window.spotifyPlayer.pause().then(() => {
                            console.log('Paused!');
                        });
                        await getWaitingOrFinalView();
                    }, 5000);
                })
            }

            //SCH: change name of this func?
            async function getWaitingOrFinalView() {
                if (songIds.length > 0) {
                    await connection.invoke("@nameof(GameHub.SendToWaitingScreen)", "@Model.GameId");
                    await getHostResults();
                }
                else {
                    await connection.invoke("@nameof(GameHub.SendToFinalPosition)", "@Model.GameId");

                    await getHostFinalResults();
                }
            }

            async function getHostResults() {
                await getPartialView("/host/showresults", result => {
                    $("#content").html(result);
                    $("#players").empty();
                });
            }

            async function getHostFinalResults() {
                await getPartialView("/host/showfinalresults", result => {
                    $("#content").html(result);
                    $("#players").empty();
                });
            }

            async function selectAndGetHostAlternatives(songId) {
                await getHostAlternatives(songId);
            };

            async function sendSong() {
                let songId = songIds.pop();
                await getPartialView("/host/getspotifyid?id=" + songId, playSong);
                await connection.invoke("@nameof(GameHub.SendSong)", "@Model.GameId", songId);
                await selectAndGetHostAlternatives(songId);
            }
            window.sendSong = sendSong;

            async function playSong(song) {
                await $.ajax({
                    url: "https://api.spotify.com/v1/me/player/play?device_id=" + window.spotifyPlayer._options.id,
                    type: "PUT",
                    data: JSON.stringify({ "uris": ["spotify:track:" + song] }),
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": "Bearer " + "@Model.SpotifyToken",
                    },
                    success: async function (result) {
                        console.log("Started playback");
                    },
                    error: function (result) {
                        console.log("Playback failed");
                    }
                })
            };

            connection.on("@nameof(IHubClient.ReceiveAnswer)", function (answer) {
                $("#players").append("Recevied answer: " + answer);
            });

            await connection.start().catch(err => console.log(err));

            $("#sendsong").click(async function () {
                await sendSong();
            });
        })();
    </script>
}