@model HostGameVM
@using MuQuiz.Hubs

<div class="row vh-100">
    <div class="col-12 col-sm-10 col-md-8 col-lg-6 mx-auto align-self-center">
        <div id="content">

        </div>

        <div id="players">

        </div>
    </div>
</div>

@section scripts {
    <script src="https://sdk.scdn.co/spotify-player.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@aspnet/signalr@1.1.0/dist/browser/signalr.min.js"></script>
    <script type="text/javascript">
        // Spotify (must follow import of spotify-player.js)
        window.onSpotifyWebPlaybackSDKReady = () => {
            const token = "@Model.SpotifyToken";

            const player = new Spotify.Player({
                name: 'MuQuiz Player',
                volume: 0.5,
                getOAuthToken: cb => { cb(token); }
            });

            // Error handling
            player.addListener('initialization_error', ({ message }) => { console.error(message); });
            player.addListener('authentication_error', ({ message }) => { console.error(message); });
            player.addListener('account_error', ({ message }) => { console.error(message); });
            player.addListener('playback_error', ({ message }) => { console.error(message); });

            // Ready
            player.addListener('ready', ({ device_id }) => {
                console.log('Ready with Device ID', device_id);
                window.spotifyPlayer = player;
            });

            // Not Ready
            player.addListener('not_ready', ({ device_id }) => {
                console.log('Device ID has gone offline', device_id);
            });

            // Connect to the player!
            player.connect();
        };

        (async function () {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/gamehub")
                .build();

            let songIds;

            async function getPartialView(url, successFunc = ResultToContentDivAndNullPlayerDiv) {
                await $.ajax({
                url: url,
                type: "GET",
                success: async function (result) {
                        successFunc(result)
                },
                error: function (result) {
                        console.log(result);
                    }
                })
            }

            function ResultToContentDivAndNullPlayerDiv(result) {
                $("#content").html(result);
                $("#players").empty();
            }

            async function getHostAlternatives(songId) {
                const maxTime = 5000;
                let time = 0;

                await getPartialView("/host/showalternatives?song=" + songId, async function (result) {
                    $("#content").html(result);

                    $("#host-timer").css("transition-duration", maxTime + "ms");
                    $("#host-timer").css("width", "0%");

                    var timeOut = await setInterval(async function () {
                        time += 1000;

                        if (time >= maxTime || connectedPlayers == numberOfAnswers) {
                            clearInterval(timeOut);
                            window.spotifyPlayer.pause().then(() => {
                                console.log("paused!");
                            });

                            await getWaitingOrFinalView();
                        }
                    }, 1000);
                })
            }

            async function getWaitingOrFinalView() {
                if (songIds.length > 0) {
                    await connection.invoke("@nameof(GameHub.SendToWaitingScreen)", "@Model.GameId");
                    await getPartialView("/host/showresults");
                }
                else {
                    await connection.invoke("@nameof(GameHub.SendToFinalPosition)", "@Model.GameId");
                    await getPartialView("/host/showfinalresults");
                }
            }

            async function sendSong() {
                correctAnswerList = 0;
                numberOfAnswers = 0;
                let songId = songIds.pop();
                await getPartialView("/host/getspotifyid?id=" + songId, playSong);
                await connection.invoke("@nameof(GameHub.SendSong)", "@Model.GameId", songId);
                await getHostAlternatives(songId);
            }
            window.sendSong = sendSong;

            async function startGame() {
                connection.invoke("@nameof(GameHub.StartGame)", "@Model.GameId");
                await sendSong();
            }

            window.startGame = startGame;

            async function startNewSession() {
                $("body").removeClass().addClass("enter_name");
                await getPartialView("/host/showlobby?round=1");
                await connection.invoke("@nameof(GameHub.SendToWaitingScreen)", "@Model.GameId");
                await connection.invoke("@nameof(GameHub.AskForJoinConfirmation)", "@Model.GameId");
                await getSongIds();
            }

            window.startNewSession = startNewSession;

            async function playSong(song) {
                await $.ajax({
                    url: "https://api.spotify.com/v1/me/player/play?device_id=" + window.spotifyPlayer._options.id,
                    type: "PUT",
                    data: JSON.stringify({ "uris": ["spotify:track:" + song] }),
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": "Bearer " + "@Model.SpotifyToken",
                    },
                    success: async function (result) {
                        console.log("Started playback");
                    },
                    error: function (result) {
                        console.log("Playback failed");
                    }
                })
                $("#players").empty();
            };

            async function getSongIds() {
                await $.ajax({
                    url: "/host/getsongids",
                    type: "GET",
                    success: async function (result) {
                        songIds = JSON.parse(result);
                    },
                    error: function (result) {
                        console.log(result);
                    }
                })
            };

            let numberOfAnswers = 0;
            let correctAnswers = 0;
            connection.on("@nameof(IHubClient.ReceiveAnswer)", function (connectionId, correctAnswer, name) {
                $("#players").append($("<p>").html(name + " answered"));
                numberOfAnswers += 1;

                 if (correctAnswer) {
                    correctAnswerList += 1;
                    connection.invoke("@nameof(GameHub.UpdateScore)", connectionId, correctAnswerList);
                }
            });

            let connectedPlayers = 0;
            connection.on("@nameof(IHubClient.ReceiveConnectedPlayerName)", function (name) {
                $("#players").append($("<p>").html(name + " joined"));
                connectedPlayers += 1;
            });

            connection.on("@nameof(IHubClient.DisconnectPlayer)", function () {
                connectedPlayers -= 1;
            });

            await connection.start().catch(err => console.log(err));

            connection.invoke("@nameof(GameHub.StartSession)", "@Model.GameId");
            await getPartialView("/host/showlobby?round=0");
            await getSongIds();

        })();
    </script>
    <script type="text/javascript">
        $(function () {
            $("body").addClass("enter_name");
        });
    </script>
}