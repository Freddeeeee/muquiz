@model PlayerGameVM
@using MuQuiz.Hubs

<h1>Welcome to game @Model.GameId, @Model.Name!</h1>

<div id="content">

</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/@@aspnet/signalr@1.1.0/dist/browser/signalr.min.js"></script>
    <script type="text/javascript">
        (async function () {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/gamehub")
                .build();

            async function getPartialView(url) {
                await $.ajax({
                    url: url,
                    type: "GET",
                    success: function (result) {
                        $("#content").html(result);
                    },
                    error: function (result) {
                        console.log(result);
                    }
                });
            }

            async function getPlayerWaitingScreen() {
                await getPartialView("/player/showwaitingscreen");
            }

            async function getPlayerAlternatives(songId) {
                await getPartialView("/player/showalternatives?song=" + songId);
            }

            async function getPlayerFinalPosition(position) {
                await getPartialView("/player/showfinalposition?position=" + position);
            }

            async function submitAnswer(answer) {
                await connection.invoke("@nameof(GameHub.SendAnswer)", answer, "@Model.GameId");
                getPlayerWaitingScreen();
            }

            async function getPlayerSessionClosedScreen() {
                await getPartialView("/player/showsessionclosedscreen");
            }

            window.submitAnswer = submitAnswer;

            await connection.start().catch(err => console.log(err));

            connection.invoke("@nameof(GameHub.AddToGroup)", "@Model.GameId", "@Model.Name");

            connection.on("@nameof(IHubClient.ReceiveSong)", async function (songId) {
                await getPlayerAlternatives(songId);
            });

            connection.on("@nameof(IHubClient.GetWaitingScreen)", async function () {
                await getPlayerWaitingScreen();
            });

            connection.on("@nameof(IHubClient.GetFinalPosition)", async function (position) {
                await getPlayerFinalPosition(position);
            });

            connection.on("@nameof(IHubClient.GetSessionClosedScreen)", async function () {
                await getPlayerSessionClosedScreen();
            });
        })();
    </script>
}